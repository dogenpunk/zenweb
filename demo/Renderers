# 'title' = 'Renderers'
# 'subtitle' = 'Standard Filters for ZenWeb'

** FooterRenderer

FooterRenderer inserts the contents of the metadata variable 'footer'
at the end of the document OR in front of a close-HTML tag, whichever
comes first.

** HeaderRenderer

HeaderRenderer inserts the contents of the metadata variable 'header'
at the end of the document OR following an open-HTML tag.

** HtmlTemplateRenderer

Is responsible for the overall structure of a page. It has a standard
HTML header and footer (ie, html, head, and body tags), as well as
some extra structure to the page like presenting the title and
subtitle as an H1 and creating a top and bottom navbar. There are a
lot of metadata variables available for customizing this renderer, see
#{Features} for more details.

** MetadataRenderer

Expands metadata variable references of the form #\{varname} into the
value associated to varname.

** RelativeRenderer

Converts HREF urls to relative urls. Nice if you are not renderering
the entire site.

** RubyCodeRenderer

Evaluates blocks that are preceded with "!" characters and shows the
code and the result together. NOTE: this feature is really weak and
will require an overhaul to irb (read: not my code) to work properly.

** SitemapRenderer

Renders sitemaps into lists of links.

** StandardRenderer

A composite of a bunch of renderers. Provides a fairly standard
feature-set.

** SubpageRenderer

Adds links to sub-pages (pages below the current page in the site-map
heirarchy).

** TextToHtmlRenderer

Does a bizillion conversions from plain text to HTML. See
#{TextToHtml} for a full description.

** TocRenderer

Generates and inserts a table-of-contents at the beginning of the
documents. It is generated from the plain-text header (eg "**")
entries.

** Abstract Renderers

There are three other renderers not listed here, CompositeRenderer,
GenericRenderer, and HtmlRenderer. These are abstract classes and are
only of interest to you if you are #{customizing} ZenWeb.
